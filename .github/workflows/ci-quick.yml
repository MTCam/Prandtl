name: CI Quick

on:
  pull_request:
  push:
    branches: [main]

jobs:
  build-test:
    name: Ubuntu/GCC
    runs-on: ubuntu-22.04
    env:
      CMAKE_BUILD_TYPE: RelWithDebInfo
      INSTALL_PREFIX: ${{ github.workspace }}/deps
    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Show submodule SHAs (debug)
        run: git submodule status --recursive
      - name: Install toolchain and deps (MPI, hypre, metis)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            gcc-12 g++-12 gfortran-12 \
            mpich libmpich-dev environment-modules \
            cmake ninja-build pkg-config ccache jq
          echo "CC=mpicc"   >> $GITHUB_ENV
          echo "CXX=mpicxx" >> $GITHUB_ENV
          echo "FC=mpifort" >> $GITHUB_ENV

      - name: Locate MFEM submodule
        id: mfemloc
        shell: bash
        run: |
          set -euo pipefail
          MFEM_SRC=""
          for d in libs/mfem external/mfem third_party/mfem mfem submodules/mfem; do
            if [[ -d "$d" ]]; then MFEM_SRC="$d"; break; fi
          done
          if [[ -z "$MFEM_SRC" ]]; then
            echo "ERROR: Could not find MFEM submodule. Expected one of: libs/mfem, external/mfem, third_party/mfem, mfem, submodules/mfem" >&2
            exit 1
          fi
          echo "MFEM_SRC=$MFEM_SRC" | tee -a $GITHUB_ENV

      - name: Build dependency submodules (HYPRE, METIS, MFEM)
        run: |
          # Make 'module' available so build_depends.sh sees IS_HPC=true and skips GLVis
          if [ -f /etc/profile.d/modules.sh ]; then
            source /etc/profile.d/modules.sh
          else
            # Fallback stub if modules.sh isn't present
            module() { return 0; }
            export -f module
          fi
          bash ./build_depends.sh

      - name: Show built dependency libs (debug)
        if: always()
        run: |
          ls -lh libs/mfem/* 2>/dev/null || true
          ls -lh libs/mfem/*/libmfem* 2>/dev/null || true
          ls -lh libs/hypre/src/hypre/lib 2>/dev/null || true
          ls -lh libs/metis-5.1.0/lib 2>/dev/null || true

      - name: Configure Prandtl
        env:
          CONFIG_FILE: compile_config.json
          CC: ${{ env.CC }}
          CXX: ${{ env.CXX }}
          FC: ${{ env.FC }}
          # These paths match your scriptâ€™s build outputs
          MFEM_DIR: ${{ github.workspace }}/libs/mfem
          HYPRE_DIR: ${{ github.workspace }}/libs/hypre/src/hypre
          METIS_DIR: ${{ github.workspace }}/libs/metis-5.1.0
        run: |
          cmake -S . -B build -G Ninja \
            -DCONFIG_FILE=${CONFIG_FILE} \
            -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE} \
            -DBUILD_TESTING=ON \
            -DMFEM_DIR="${MFEM_DIR}" \
            -DHYPRE_DIR="${HYPRE_DIR}" \
            -DMETIS_DIR="${METIS_DIR}"

      - name: Build Prandtl
        run: cmake --build build -- -k 0

      - name: Example smoke test (LidDrivenCavity)
        run: |
          scripts/test_run_example.sh \
            -c TestCases/NavierStokes/2D/LidDrivenCavity/config.json \
            -n 100

      - name: Unit smoke tests
        run: ctest --test-dir build -L smoke -j2 --output-on-failure

      - name: Upload quick artifacts (logs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: prandtl-quick-logs
          path: |
            build/Testing/**/Test.xml
            build/CMakeCache.txt
            build/**/*.log
